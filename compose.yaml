# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

networks:
  matli_network:
    name: matli_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
          gateway: 172.16.238.3

services:
  web-server:
    build:
      context: ./web-server
      # dockerfile: ./web-server/Dockerfile
    ports:
      - 4000:4000
    develop:
      watch:
        - action: sync
          path: ./web-server
          target: /usr/app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./package.json
    # volumes:
    #   - ./:/usr/app/
    
  nginx:
    build: ./nginx
    ports:
    - '80:80'
    depends_on:
    - web-server

  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - ./secrets/calc-db/db-password.txt:/run/secrets/db-password
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password    
  
  




# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
  # db:
  #   image: postgres
  #   restart: always
  #   user: postgres
  #   secrets:
  #     - db-password
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=example
  #     - POSTGRES_PASSWORD_FILE=./db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

